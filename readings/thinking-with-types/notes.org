#+title: thinking with types

* Chapter 0
- typed function ~printf~ (in [[Chapter 9 Associated Type Families][Chapter 9]])

* Chapter 1 Algebra data type
1. cardinality:
   - quotes
   #+BEGIN_QUOTE
   the number of inhabitants it has, ignoring bottoms.
   #+END_QUOTE
   - or can we say /number of data constructor/? not really.
     #+BEGIN_SRC
     card{Maybe a} = 1 + card{a}
     where 1 comes from Nothing
     #+END_SRC
   - *inhabitants*
2. isomorphic: types have same cardinality always be ~iso~
3. cardinality of function
   #+BEGIN_SRC
     card{a -> b} = card{b}^card{a}
   #+END_SRC
   #+BEGIN_QUOTE
   In fact, even the notion of differentiation in calculus has meaning in the domain of types.
   Conor McBride's paper The Derivative of a Regular Type is its Type of One-Hole Contexts.
   #+END_QUOTE
4. [[file:TicTacToe.hs][TicTacToe example]]
   - I see the beauty of ~Board3~ is to chain bunch of if-else instead of manually crafting those if-else
   - See ~getAt1~ and ~setAt1~, they are basically bunch of if-else expressions (more obvious if use if-else instead of pattern matching)
   - And ~setAt3~ avoids all those verbosity.
5. The Curry--Howard Isomorphism
:NOTES:
- use [[https://en.wikipedia.org/wiki/List_of_logic_symbols][this table]] to find out what symbol in org mode.
- unable to find ~\top~
:END:

   | **Algebra** | **Logic** | **Types**     |
   |-------------+-----------+---------------|
   | a + b       | a \vee b     | Either a b    |
   | a \times b       | a \wedge b     | (a, b)        |
   | b^a         | a \Rightarrow b     | a -> b        |
   | a = b       | a \Leftrightarrow b     | *isomorphism* |
   | 0           | \perp         | Void          |
   | 1           | \top      | ()            |

6. proof that ~(a^b)^c = a^(b*c)~
   #+BEGIN_SRC haskell
fn1 = c -> b -> a
-- fn2 and fn3 shall be identical
fn2 = (b, c) -> a
fn3 = (c, b) -> a
curry = fn2 -> fn1
uncurry = fn1 -> fn2
   #+END_SRC
7. proof that ~a^b * a^c = a^(b+c)~
   #+BEGIN_SRC haskell
data1 = (b -> a, c -> a)
fn1 :: Either b c -> a
to :: (b->a, c->a) -> (Either b c -> a)
to (f, g) (Left b)  = f b
to (f, g) (Right c) = g c
from :: (Either b c -> a) -> (b->a, c->a)
from fx = (f, g)
          where f b = fx (Left b)
                g c = fx (Right c)
   #+END_SRC
8. proof that ~(a*b)^c = a^c * b^c~
   #+BEGIN_SRC haskell
fn1 :: c -> (a, b)
data1 = (c -> a, c -> b)
to :: (c -> (a, b)) -> (c->a, c->b)
to fx = (fst . fx, snd . fx)
from :: (c->a, c->b) -> (c -> (a, b))
from (f, g) c = (f c, g c)
   #+END_SRC
9. ~ghc.generics~, canonical forms
   - did not understand
   - more on [[id:b7df2fab-22ab-4af9-a6f9-8c830699fde8][Chapter 13]]

* Chapter 2 Terms, Types, Kinds
1. Kind
   #+BEGIN_SRC haskell
   :k Maybe
   Maybe :: * -> *
   :k (->)
   (->) :: * -> * -> *
   :k Either
   Either :: * -> * -> *
   #+END_SRC
2. ~*~ is slated for deprecation
   #+begin_src haskell
ghci> :set -XNoStarIsType
ghci> :k Maybe
Maybe :: Type -> Type
   #+end_src
3. type class returns ~Constraint~ at type level
   #+BEGIN_SRC haskell
   Show :: Type -> Constraint
   Functor :: (Type -> Type) -> Constraint
   Monad :: (Type -> Type) -> Constraint
   #+END_SRC
4. *esoteric* language extensions
5. ~DataKinds~ extension
   - example
     #+BEGIN_SRC haskell
   {-# LANGUAGE DataKinds     #-}
   data Bool = True | False
   {-
     type constructor Bool,  kind Type
     data constructor True,  type Bool
     data constructor False, type Bool
     a new kind: Bool
     promoted data constructor 'True,  kind Bool
     promoted data constructor 'False, kind Bool
   -}
     #+END_SRC
   - [[file:HelloDataKinds.hs][another example]]
6. promoted data constructors exist in the same name-space as type constructors
7. all built data constructor can be promoted by ~DataKinds~
   - need to understand deep on the motivation, benefits, use cases.
   - seems pretty tricky when dealing with promoted data con of List, Tuple
8. Example ~War/Age~
   - I wish it's run-able and have some bug in the code for reader to fix
   - For now, I can only see the leverage of phantom type
9. List of Bool at type level
    #+begin_src haskell
:k [Bool]
Type
:k '[Bool]
[Type]
-- can we have type level [Bool]? yes
  :k '[ 'True ]
  #+end_src
10. closed type family
    - functions at the type level
    - ~TypeFamilies~
    - Can read as /define a type function Or that../ ?
      #+BEGIN_SRC haskell
      type family Or (x :: Bool) (y :: Bool) :: Bool where
      Or 'True  y = 'True
      Or 'False y = y
      #+END_SRC
    - type families must be *saturated*. no currying.
    - work around by *first class families* in [[Chapter 10][Chapter 10]]

* Chapter 3 Variance
1. covariant
   - ~BiFunctor~
2. contravariant
   - [[https://hackage.haskell.org/package/contravariant][hackage contravariant]]
   - ~CoFunctor~
   - ~ProFunctor~
   - ~contramap :: (a -> b) -> f b -> f a~
   - what hack / usefulness is this?
3. invariant
   - [[https://hackage.haskell.org/package/invariant][hackage invariant]]
   - /invariant type allows you to map from a to b iff a and b are iso/
4. [ ] Don't understand nor the Positive and Negative of types.

* Chapter 4 Working with types
1. ~ScopeTypeVariables~
   + works with explicit ~forall~ quantifier
   + ~forall~ introduces a type scope
2. ~TypeApplications~
   + directly apply types to expressions
   + ~fmap @Maybe :: (a->b) -> Maybe a -> Maybe b~
   + ~:t fmap @_ @Int @Bool :: Functor w => (Int->Bool) -> w Int -> w Bool~

* Chapter 5 Contstraints and GADTs
1. type class Constraints :: left side of fat arrow ~=>~
2. type equalities: the ~a ~ Int~ in ~five :: (a ~ Int) => a~
3. GADT is syntactic sugar over type equalities.
4. heterogeneous list :: a list that can store values of different types
5. [ ] need to dig deeper into heterogeneous list implementation

* Chapter 6 Rank-N Types
1. can not compile
   #+BEGIN_SRC haskell
applyToFive :: (a -> a) -> Int
applyToFive f = f 5
   #+END_SRC
2. ~RankNTypes~ :: polymorphism anywhere but not top level
3. What is ~rank~? /depth/ or /level/ of the polymorphism of a function
4. rank 0 mean no polymorphism
5. rank 1, e.g. ~a -> a~, ~[a] -> a~
6. [ ] is there way to check the rank of a function?
7. ~applyToFive~ is rank 2
8. call it ~rank-n~ when above rank-1
9. why higher-rank types? functions which takes /callbacks/.
10. CPS, ~Cont~ data type v.s. nested callback

* Chapter 7 Existential Types
1. ~data Any = forall a. Any a~
2. can also be represented using GADT
3. Generalized Constraint
   #+BEGIN_SRC haskell
data Has (c :: Type -> Constraint) where
  Has :: c t => t -> Has c

type HasShow = Has Show
-- compares to
data HasShow where
  HasShow :: Show t => t -> HasShow

type Dynamic = Has Typeable
-- comparse to
data Dynamic where
  Dynamic :: Typeable t => t -> Dynamic

   #+END_SRC
4. What is ~Type~ and ~Constraint~
   - from [[http://hackage.haskell.org/package/base-4.14.0.0/docs/Data-Kind.html][Data.Kind]]
    
   #+BEGIN_QUOTE
type Type = Type
The kind of types with lifted values. For example Int :: Type.

data Constraint
The kind of constraints, like Show a
   #+END_QUOTE

* Chapter 8 Roles
1. ~newtype~ is zero cost
2. ~coerce :: Coercible a b => a -> b~
   + as long as ~a~ and ~b~ have same runtime representation.
3. type has been assigned to role, and there are 3 roles
   + nominal
   + representational
   + phantom

* Chapter 9 Associated Type Families

* Chapter 10

* Chapter 11

* Chapter 12

* Chapter 13

* Chapter 14

* Chapter 15

* Questions [0/2]
1. [ ] what is ~Data.Proxy~?
2. [ ] check ~bifunctor~, ~profunctor~ from <The Monad Book>
