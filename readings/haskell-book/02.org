#+TITLE: chapter 2 Hello, Haskell

* Reading notes
1. WHNF: weak head normal form
   - ~(\f -> (1, 2 + f)) 2~ reduces to ~(1, 2 + 2)~
   - how can we tell? see [[Follow up][Follow up]]
2. Associativity and precedence
   - ~infixl~: infix, left associativity
   - ~infixr~: infix, right associativity
   - precedence scale ~0-9~, higher is applied first.
3. Difference between ~mod~ and ~rem~
   - same when parameter are both positive or negative
   - and difference appears otherwise, e.g.
     #+begin_src haskell
     mod (3-12) 7 -- 5
     rem (3-12) 7 -- -2
     #+end_src
   - ~mod~ is /modulus/ arithmetic

* Follow up [1/1]
1. [X] Can we tell if an expression reduce to WHNF in GHCi?
   - ~sprint~? (see [[https://github.com/freizl/my-notes/blob/main/src/20-roam-notes/20210818221216-haskell_for_imperative_programmers.org#31-whnf][weak head normal form]])
   - doesn't work as the video shows is ~ghc-8.10~
   - <2022-07-22 Fri> it wasn't completely didn't work
     #+begin_example
ghci> let x = 1 + 2 :: Int ## assign the type Int
ghci> :sprint x
x = _
ghci> seq x ()
()
ghci> :sprint x
x = 3
     #+end_example
