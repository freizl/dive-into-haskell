#+TITLE: Chapter 1 All You Need is Lambda

* Reading notes
- Function is a mapping of _a set of inputs_ to _a set of outputs_, a.k.a Domain ➙ CoDomain.
- /application/
#+begin_quote
application is the lynchpin of the lambda calculus.
#+end_quote
- /Alpha equivalence/: meaning following expressions have same meaning
  + ~λx.x~
  + ~λd.d~
  + ~λz.z~
- /Beta reduction/: apply a function to an argument and eliminate lambda header
  #+begin_quote
  Beta reduction stops when there are no longer unevaluated functions applied to arguments
  #+end_quote
- What if lambda expression has 2 input and only apply to one argument?
  #+begin_quote
  Each lambda can only bind one parameter and can only accept one argument.
  Functions that require multiple arguments have multiple, nested heads.
  #+end_quote
- Equivalence exercises
  1. ~λxy.xz~ :: ~λmn.mz~
  2. ~λxy.xxy~ :: ~λa.(λb.aab)~
  3. ~λxyz.zx~ :: ~λtos.st~
- /beta normal form/
  + can not beta reduce further
- /converge/ v.s. /diverge/
  + terms /converge/ to beta normal form
  + terms never terminates or ends, hence /diverge/
  + *omega diverge*: ~(λx.xx)(λx.xx)~
* Chapter exercises
1. Combinators
   - ~λx.xxx~
   - ~λxyz.xy(zx)~
   - ~λxyz.xy(zxy)~
2. Normal form or diverge?
   1. ~λx.xxx~
   2. ~(λz.zz)(λy.yy)~ diverge
   3. ~(λx.xxx)z~
      - ~zzz~
3. Beta reduce
   1. ~(λabc.cba)zz(λwv.w)~
      - ~(λc.czz)(λwv.w)~
      - ~(λwv.w)zz~
      - ~z~
   2. ~(λx.λy.xyy)(λa.a)b~
      - ~(λy.(λa.a)yy)b~
      - ~(λa.a)bb~
      - ~bb~
   3. ~(λy.y)(λx.xx)(λz.zq)~
      - ~(λx.xx)(λz.zq)~
      - ~(λz.zq)(λz.zq)~
      - ~(λz.zq)q~
      - ~qq~
   4. ~(λz.z)(λz.zz)(λz.zy)~
      - ~(λz.zz)(λz.zy)~
      - ~(λz.zy)(λz.zy)~
      - ~(λz.zy)y~
      - ~yy~
   5. ~(λx.λy.xyy)(λy.y)y~
      - ~(λy.y)yy~
      - ~yy~
   6. ~(λa.aa)(λb.ba)c~
      - ~(λb.ba)(λb.ba)c~
      - ~(λb.ba)ac~
      - ~aac~
   7. ~(λxyz.xz(yz))(λx.z)(λx.a)~
      - ~λz1.(λx.z)z1((λx.a)z1)~
      - ~λz1.z(a)~
      - ~λz1.za~
