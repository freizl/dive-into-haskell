#+title: Readme

* Chapter 12 Meta-programming in Haskell
** Notes
1. ~-ddump-deriv~
2. More about roles and role inference in GHC User's Guide
   - in order to understand better of ~coerce~
3. TH
   - a way to construct Haskell AST in Haskell Code
   - ~Q~ monad
   - ~Exp~, ~Dec~, ~Type~ and ~Pat~ type
   - ~$(..)~ runs the ~Q~ computation (a.k.a splice node into code itself.)
4. Quasiquoters
   - custom function to parse haskell literal
     #+begin_src haskell
[multiLineStr|abc,
hello
string
|]

[url|https://www.okta.com|]
     #+end_src

   - sort of write function to parse haskell literals

** Papers
1. [[https://www.seas.upenn.edu/~sweirich/papers/coercible-JFP.pdf][Safe Zero-Cost Coercions for Haskell]]
   - [[https://youtu.be/iLZdN-R1JGk][Video by SPJ]]
2. [[https://www.kosmikus.org/DerivingVia/deriving-via-paper.pdf][Deriving Via or, How to Turn Hand-Written Instances into an Anto-Pattern]]
