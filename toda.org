* BACKLOG
** Iteratee IO                                                       :PAPERS:
   -  as popularized by Oleg Kiselyov,[[http://okmij.org/ftp/Streams.html][Streams]]
** On Understanding Type                                             :PAPERS:
** Type related papers                                               :PAPERS:
   - [[http://www.haskell.org/haskellwiki/Research_papers/Type_systems][On HaskellWiki]]
** Interesting Module
   - Foldable / Traversable / Typeable
     `newtype MyInt = MyInt Int (Deriving Typeable)`
     ` 2 :: MyInt`
   - Lens
** example projects                                                     :LIB:
   - xmonad
   - snap
   - LambdaHack
     1. [[https://github.com/kosmikus/LambdaHack][Source Code]]
   - preclude
   - mtl / transform
   - Data.Text
   - ByteString
   - pandoc
   - Parsec
   - QuickCheck
   - HUnit
   - HXT study
** morphism                                                            :LANG:
  - [[http://en.wikipedia.org/wiki/Morphism][Morphism]]
  - isomorphism
  - polymorphism
  - monomorphism
** The Haskell School of Expression                                    :BOOK:
** Tic toe tac game                                                    :GAME:
** Advanced FP                                                        :VIDEO:
** nim game                                                        :GAME:PIH:
** FRP                                                                  :FRP:
** Yesod OAuth authenticate                                           :Yesod:
   1. [X] failed at getting access token
          need callback at getting auth code
   2. [ ] post the finding
** hakyll (src and tutorial)                                         :Hakyll:
* IN-PROGRESS
** TODO [#B] Distinguish those concepts                                :LANG:
   - Polymorphic Components
     - *From Hindley-Milner Types to First-Class Structures* by Mark P. Jones
   - RankNTypes
     - *Arbitrary-rank polymorphism* in the GHC User's Guide.
     - *Practical type inference for arbitrary-rank types*, Simon Peyton Jones, Mark Shields,etc.
     - *Boxy types: type inference for higher-rank types and impredicativity*, Simon Peyton Jones, ICFP 2006.
     - *Semantics of Types and Classes* in the Haskell 98 Report
   - Existential Quantification
     - Subsumed by GADT. ( *Simple unification-based type inference
       for GADTs* by Simon Peyton Jones )
     - *Polymorphic Type Inference and Abstract Data Types* by K. LÃ¤ufer
       and M. Odersky, in TOPLAS, Sep 1994.
   - Universal Quantification / Polymorphism
*** links
    - [[http://johnlato.blogspot.in/2012/03/existential-quantification-pt-1.html][Existential Quantification pt. 1]]
    - [[http://johnlato.blogspot.in/2012/03/faking-it-with-higher-rank-existential.html][Existential Quantification pt. 2 (Faking it with higher rank)]]
* DONE
** DONE Monad for web application                                     :VIDEO:
   CLOSED: [2012-10-11 Thu 20:49]
** DONE Post mtl finding and demo
   CLOSED: [2012-04-09 Mon 20:21]
** DONE KnightQuests exercise                                          :LYGH:
   CLOSED: [2012-04-07 Sat 11:19]
   - Chapter 12
** DONE stockwatcher in haskell
    CLOSED: [2011-05-16 Mon 06:02]
** DONE haskell toturial
   CLOSED: [2011-05-16 Mon 06:01]
   - Note taken on [2011-05-16 Mon 06:02] \\
     finish once...probably need re-read..
** DONE Quickcheck                                                     :Test:
   CLOSED: [2011-09-01 Thu 15:34]
   1. [X] what and how
   2. [[http://www.cse.chalmers.se/~rjmh/QuickCheck/][Home page]]
   3. [X] how to create Test suite

** DONE Move notes in google code wiki to `notes` here
   CLOSED: [2011-11-20 Sun 15:09]
** DONE Post what learn from euler 104
   CLOSED: [2011-12-26 Mon 19:45]
** DONE Post mtl finding and demo
   CLOSED: [2012-04-08 Sun 12:09]
* Questions
** String / List
   1. [X] substitue function / re exp
          - levarge map f
          - a regx module
* Tags

| TAG  | Full Name               |
|------+-------------------------|
| PIH  | Programming in Haskell  |
| LYGH | Learn Your Good Haskell |
