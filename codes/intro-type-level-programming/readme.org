#+TITLE: Introduction to type level programming

* Notes
- Exercise of [[https://rebeccaskinner.net/posts/2021-08-25-introduction-to-type-level-programming.html][this blog post]]
- Kind of a Type.
  #+begin_src haskell
:kind! Maybe
Maybe :: Type -> Type
  #+end_src

- Is the mental model like /Maybe/ is type level /function/ that takes a type(kind) and return a type(kind)?
- e.g. at value level, ~1~ is a value and has type ~Int~, at type level, ~1~ is a type and has kind ~Nat~

- [[https://hackage.haskell.org/package/base-4.16.0.0/docs/GHC-TypeLits.html][GHC.TypeLits]]
  + built type level string (symbol), number, list
- But what exactly is a type-level function? *Type Family*
  #+begin_quote
  A plain haskell function is a function from a value to a value.
  We can think of a typeclass as a function from a type to a value (generally a function from a type to one or more value-level functions values).
  We can even think of GADTs as a function from a value (the type constructor) to a type.
  The last piece of our puzzle then, are Type Families, which we can think of as functions from types to other types.
  #+end_quote

- Feel it's too much starting from section /Bringing Back Support For Runtime Configuration/ :(

* Command

#+begin_src sh
cabal v2-clean
cabal --jobs=2 v2-build all
#+end_src
